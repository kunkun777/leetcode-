/**
     * 功能描述: 814. 二叉树剪枝
     * @Author: zxc
     * @Date: 2020/10/19 14:25
     * @Descreption:
     */
    public TreeNode pruneTree(TreeNode root) {
        order(root);
        if (root!=null&&root.val==0)return null;
        return root;
    }

    void order(TreeNode root){
        if (root!=null){
            if (isZero(root.left)){
                root.left=null;
            }
            if (isZero(root.right)){
                root.right=null;
            }
            pruneTree(root.left);
            pruneTree(root.right);
        }
    }
    boolean isZero(TreeNode root){
        if (root==null)return false;
        return root.val==0&&isZero(root.left)&&isZero(root.right);
    }




//同样的思路只不过是通过依次遍历的时候进行相应的剪枝，它判断的是相应的子节点，而上面的方法判断的是相关枝条下的子节点
public TreeNode pruneTree(TreeNode root) {
        return containsOne(root) ? root : null;
    }

    public boolean containsOne(TreeNode node) {
        if (node == null) return false;
        boolean a1 = containsOne(node.left);
        boolean a2 = containsOne(node.right);
        if (!a1) node.left = null;
        if (!a2) node.right = null;
        return node.val == 1 || a1 || a2;
    }
