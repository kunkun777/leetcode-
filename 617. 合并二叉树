    /**
     * 功能描述: 617. 合并二叉树
     * @Author: zxc
     * @Date: 2020/10/8 14:08
     * @Descreption: 利用中序遍历，唯一优化的地方就是，如果某点一方为空/一方非空，就直接返回相应的结点
     */
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        return order(t1,t2);
    }

    TreeNode order(TreeNode t1, TreeNode t2){
        //一方为空就返回另一方，如果都为空直接为null
        if (t1 == null) {
            return t2;
        }
        if (t2 == null) {
            return t1;
        }
        //两方都为非空，就将两者相加
        TreeNode re=new TreeNode(t1.val+t2.val);
        //对两者的结点进行递归方法的调用
        re.right=order(t1.left,t2.left);
        order(t1.right,t2.right);
        //返回小树的根结点
        return re;
    }
/**
     * 功能描述: #617 合并二叉树
     * @Author: zxc
     * @Date: 2020/10/12 0:17
     * @Descreption: BFS,利用相应的队列，分别存储各自的结点，然后各自相加或者直接代替
     */
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null) {
            return t2;
        }
        if (t2 == null) {
            return t1;
        }
        //用于头个结点
        TreeNode merged = new TreeNode(t1.val + t2.val);
        //分别是利用的队列
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        Queue<TreeNode> queue1 = new LinkedList<TreeNode>();
        Queue<TreeNode> queue2 = new LinkedList<TreeNode>();
        //将各个结点依次入队
        queue.offer(merged);
        queue1.offer(t1);
        queue2.offer(t2);
        //当2个附属结点都不为空，就继续
        while (!queue1.isEmpty() && !queue2.isEmpty()) {
            //取出各自的头个结点
            TreeNode node=queue.poll(),node1=queue1.poll(),node2=queue2.poll();
            //取出2棵树的各自左右结点
            TreeNode left1 = node1.left, left2 = node2.left, right1 = node1.right, right2 = node2.right;
            //只要有一棵树的相应结点不为空
            if (left1 != null || left2 != null) {
                //如果2者都不为空
                if (left1 != null && left2 != null) {
                    TreeNode left = new TreeNode(left1.val + left2.val);
                    node.left = left;
                    queue.offer(left);
                    queue1.offer(left1);
                    queue2.offer(left2);
                    //树1不为空
                } else if (left1 != null) {
                    node.left = left1;
                    //树2不为空
                } else if (left2 != null) {
                    node.left = left2;
                }
            }
            if(right1 != null || right2 != null) {
                if (right1 != null && right2 != null) {
                    TreeNode right = new TreeNode(right1.val + right2.val);
                    node.right = right;
                    queue.offer(right);
                    queue1.offer(right1);
                    queue2.offer(right2);
                } else if (right1 != null) {
                    node.right = right1;
                } else {
                    node.right = right2;
                }
            }
        }
        return merged;
    }
